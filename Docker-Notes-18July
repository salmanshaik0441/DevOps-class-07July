
# docker images

# docker ps -a


Deleting all containers:

$ docker rm -f $(docker ps -aq)

Deleting all images:

$ docker system prune --all


Scenario 1: Port forwarding / Port Binding
********************

Once a container si created, you can access it from host machine

or

IF THE CONTAINER IS OF TYPE WEB APPLICATION

you can access the application of the container from the browser of your laptop

***** This scenario is not application to Images of type OS, DB

This scenario of Port forwarding / Port Binding works for Images which have web application


Port forwarding / Port Binding ==> it is applied only when creating the container

Once the container is created you cannot map a port

Here you have to give 2 posts for mapping

1. system port : any free port on EC2 

2. Container port : port exposed on the image--> you cannot change this if it is docker base image

For mapping , your will use run command and the option will be 

-p systemport:cotainerport

$  docker run -d --name n2 -p 8082:80 nginx


-P : docker will assign system port and container port. we dont do any port mapping

$ docker run -d --name n3 -P nginx


*****************

Scenario 2:


Once the container is running, you can acess its application page from the host

Step 1:

$ docker exec -it contianerName bash

For nginx container the location for application page is going to be 

/usr/share/nginx/html

$ cd /usr/share/nginx/html

$ ls

you will find index.html, chnage the content of this file

$ echo "this is new file" > index.html

$ exit

Access the container from browser, you new application willbe available
**************************

Docker Volumes:

*************************

1. How to create a volume

Volume is a directory which will preserve containers data, even after container is deleted

$ docker volume ls

$ docker volume create <name>

The volume will store the data in the follwing path:

/var/lib/docker/volumes/myvol/_data

2. Attach the volume to the container directory whose data has to be preserved

Volume mapping/volume mounts is done using -v

docker run -it --name u4 -v myvol:/tmp ubuntu

on the container fo to tmp directory, create 2 3 empty files

come out of container

Go to volume directory :/var/lib/docker/volumes/myvol/_data

you will back of the files


3. Delete the container and check if data is preserved in the volume ot not


Now delete the container, still file will be in volume directory

you will give : volume Name and container directory whose data has to be preserved

4. Can containers share the data ?

Yes.

You can have 1 volume and multiple containers can mouth that volume


docker run -it --name u1 -v myvol:/tmp ubuntu

Create a file file1

docker run -it --name u2 -v myvol:/tmp ubuntu


Scenario 5: 

Type Volume : Bind mounts


With bind mount type of volume, any directory on the host can be mounted on the container directory



1. get the application code from github to Local docker host

$  git clone https://github.com/Sonal0409/ecomm.git

$ cd ecomm

$ ls

$ pwd ==>  /root/ecomm

2. What ever code files are in the current directory, copy it to the container directory

HTML code doesn't need to be build
HTMl code will always be deployed on a Httpd image


$  docker run -d --name web -P -v /root/ecomm/:/usr/local/apache2/htdocs httpd

Application code will be on the container

ipaddress:portnumber  ==> access application

























































































































